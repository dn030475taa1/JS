//Массив. Мутирующий. Метод Array.from() создаёт новый экземпляр Array из массивоподобного или итерируемого объекта.
/*var arr = Array.from('Content');
console.log(arr);
/*
Результат
[
  'C', 'o', 'n',
  't', 'e', 'n',
  't'
]
*/

//Массив. Мутирующий метод SPLIT. Метод split() разбивает объект String на массив строк путём разделения строки указанной подстрокой.
/*
var names = 'Alex, Pitter, Oliver, Mark';
console.log(names);
//Результат
//Alex, Pitter, Oliver, Mark
var arr = names.split(', ');
console.log(arr);
//Результат
// [ 'Alex', 'Pitter', 'Oliver', 'Mark' ]
*/


//Массив. Мутирующий метод FILL. Метод fill() заполняет все элементы массива от начального до конечного индексов одним значением.
/*
var arr = [1, 2, 3];
console.log(arr);
//Результат
// [ 1, 2, 3 ]
arr.fill (6);
//Результат
// [ 6, 6, 6 ]
console.log(arr);
*/

//Массив. Мутирующий метод POP. Метод pop() удаляет последний элемент из массива и возвращает его значение.
/*
var arr = [1, 2, 3];
console.log(arr);
//Результат
// [ 1, 2, 3 ]
arr.pop ();
console.log(arr);
//Результат
//[ 1, 2 ]
*/

//Массив. Мутирующий метод PUSH. Метод push() добавляет один или более элементов в конец массива и возвращает новую длину массива.
/*
var arr = [1, 2, 3];
console.log(arr);
//Результат
// [ 1, 2, 3 ]
arr.push (4, 5);
console.log(arr);
//Результат
// [ 1, 2, 3, 4, 5 ]
*/

//Массив. Мутирующий метод REVERSE. Метод reverse() на месте обращает порядок следования элементов массива.
// Первый элемент массива становится последним, а последний — первым.
/*
var arr = [1, 2, 3];
console.log(arr);
//Результат
//[ 1, 2, 3 ]
arr.reverse ();
console.log(arr);
//Результат
//[ 3, 2, 1 ]
*/

//Массив. Мутирующий метод SORT. Метод sort() на месте сортирует элементы массива и возвращает отсортированный массив.
/*
var arr = [3, 2, 7, 1];
console.log(arr);
//Результат
// [ 3, 2, 7, 1 ]
arr.sort();
console.log(arr);
//Результат
// [ 1, 2, 3, 7 ]
*/

//Массив. Мутирующий метод SPLICE. Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.
/*
var arr = [1, 3, 4];
console.log(arr);
//Результат
// [ 1, 3, 4 ]
arr.splice (1,0,2);
console.log(arr);
//Результат
// [ 1, 2, 3, 4 ]
*/

//Массив. Мутирующий метод SHIFT. Метод shift() удаляет первый элемент из массива и возвращает его значение. Этот метод изменяет длину массива.
/*
var arr = [1, 2, 3];
console.log(arr);
//Результат
// [ 1, 2, 3 ]
arr.shift ();
console.log(arr);
//Результат
// [ 2, 3 ]
*/

//Массив. Мутирующий метод UNSHIFT () добавляет один или более элементов в начало массива и возвращает новую длину массива.
/*var arr = [2, 3];
console.log(arr);
// Результа [ 2, 3 ]
arr.unshift (1);
console.log(arr);
// Результат [ 1, 2, 3 ]
*/

/*Массив. Мутирующий метод. Метод copyWithin() копирует последовательность элементов массива внутри него в позицию,
начинающуюся по индексу target. Копия берётся по индексам, задаваемым вторым и третьим аргументами start и end.
Аргумент end является необязательным и по умолчанию равен длине массива.*/
/*
var arr = [1, 2, 3, 0];
console.log(arr);
// Результаn [ 1, 2, 3, 0 ]
arr.copyWithin(1,3);
console.log(arr);
// Результат
// [ 1, 0, 3, 0 ]
*/

/*Массив. Немутирующий метод. Метод concat() возвращает новый массив, состоящий из массива,
на котором он был вызван, соединённого с другими массивами и/или значениями, переданными в качестве аргументов.*/
/*
var first = [1, 2, 3];
var second = [4, 5, 6];
console.log(first);
console.log(second);
// Результат
// [ 1, 2, 3 ]
// [ 4, 5, 6 ]
var arr=first.concat(second);
console.log(arr);
// Результат
// [ 1, 2, 3, 4, 5, 6 ]
*/

/* Массив. Немутирующий метод. Метод flat() возвращает новый массив,
в котором все элементы вложенных подмассивов были рекурсивно "подняты" на указанный уровень depth.*/
/*
var source=[1, 2, [3, 4]];
console.log(source);
//Результат
// [ 1, 2, [ 3, 4 ] ]
var destination = source.flat();
console.log(destination);
// Результат
// [ 1, 2, 3, 4 ]
*/

/* Массив. Немутирующий метод. Метод flatMap() сначала применяет функцию к каждому элементу,
а затем преобразует полученный результат в плоскую структуру и помещает в новый массив.
Это идентично map функции, с последующим применением функции flat с параметром depth ( глубина ) равным 1,
но flatMap часто бывает полезным, так как работает немного более эффективно.*/
/*
var source = [1, 2, 3];
console.log(source);
//Результат
// [ 1, 2, 3 ]
var destination = source.flatMap (function(item) {
    return [[item*2]];
});
console.log(destination);
// Результат
// [ [ 2 ], [ 4 ], [ 6 ] ]
*/

// Массив. Немутирующий метод. Метод join() объединяет все элементы массива (или массивоподобного объекта) в строку.
/*
var source = [1, 2, 3];
console.log(source);
//Результат
// [ 1, 2, 3 ]
var str = source.join (' ');
console.log(str);
//Результат
// 1 2 3
*/

// Массив. Немутирующий метод. Метод slice() возвращает новый массив, содержащий копию части исходного массива.
/*
var source = [1, 2, 3, 4];
console.log(source);
// Результат
// [ 1, 2, 3, 4 ]
var destination = source.slice(1,4);
console.log(destination);
// Результат
// [ 2, 3, 4 ]
*/

/* Массив. Методы поиска. Метод find() возвращает значение первого найденного в массиве элемента,
которое удовлетворяет условию переданному в callback функции.  В противном случае возвращается undefined.*/
/*
var arr= [1, 2, 3, 4, 5];
console.log(arr);
// Результат
// [ 1, 2, 3, 4, 5 ]
var item = arr.find (function(element) {
    return element > 2;
    });
console.log(item);
// Результат
// 3
*/

/* Массив. Методы поиска. Метод findIndex() возвращает индекс в массиве,
если элемент удовлетворяет условию проверяющей функции. В противном случае возвращается -1.*/
/*
var arr= [1, 2, 3, 4, 5];
console.log(arr);
// Результат
// [ 1, 2, 3, 4, 5 ]
var item = arr.findIndex (function (element) {
    return element > 2;
});
console.log(item);
// Результат
// 2
*/

/* Массив. Методы поиска. Метод indexOf() возвращает первый индекс,
по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.*/
/*
var arr= [1, 2, 3, 4, 5];
console.log(arr);
// Результат
// [ 1, 2, 3, 4, 5 ]
var item = arr.indexOf (3);
console.log(item);
// Результат
// 2
*/

/* Массив. Методы поиска. Метод lastIndexOf() возвращает последний индекс,
по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.
Массив просматривается от конца к началу, начиная с индекса fromIndex. */
/* var arr = [1, 2, 3, 4, 3];
console.log(arr);
// Результат
// [ 1, 2, 3, 4, 3 ]
var item = arr.lastIndexOf (3);
console.log(item);
// Результат
// 4
*/

// Массив. Методы перебора. Метод forEach() выполняет указанную функцию один раз для каждого элемента в массиве.
/*
var arr= ['Alex', 'Pitter' , 'Oliver'];
console.log(arr);
// Результат
// [ 'Alex', 'Pitter', 'Oliver' ]
arr.forEach (function (item, i, arr) {
    console.log(i + ':' + item + '(array:' + arr + ')');
});
// Результат
// 0:Alex(array:Alex,Pitter,Oliver)
// 1:Pitter(array:Alex,Pitter,Oliver)
// 2:Oliver(array:Alex,Pitter,Oliver)
*/

// Массив. Методы перебора. Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.
/*
var arr = [1, -1, 2, -2, 3];
console.log(arr);
// Результат
// [ 1, -1, 2, -2, 3 ]
var positiveArr = arr.filter (function(number) {
    return number >0;
});
console.log(positiveArr);
// Результат
// [ 1, 2, 3 ]
*/

// Массив. Методы перебора. Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
/*
var arr= ['HTML', 'CSS', 'JavaScript'];
console.log(arr);
// Результат
// [ 'HTML', 'CSS', 'JavaScript' ]
var transformed = arr.map (function(name) {
    return name.toLowerCase ();
});
console.log(transformed);
// Результат
// [ 'html', 'css', 'javascript' ]
*/

/* Массив. Методы перебора. Метод reduce() применяет функцию reducer к каждому элементу массива (слева-направо),
возвращая одно результирующее значение.*/
/*
var arr= [1, 2, 3];
console.log(arr);
// Результат
// [ 1, 2, 3 ]
var result = arr.reduce(function(sum, current) {
    return sum + current;
});
console.log(result);
// Результат
// 6
*/

/* Массив. Методы перебора. Метод reduceRight() применяет функцию к аккумулятору и каждому значению массива (справа-налево),
сводя его к одному значению.*/
/*
var arr = ['a', 'b', 'c'];
console.log(arr);
// Результат
// [ 'a', 'b', 'c' ]
var result = arr.reduceRight(function(sum, current) {
    return sum + current;
});
console.log(result);
// Результат
// cba
*/

// Массив. Методы перебора. Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
/*
var arr = [1, -1, 2, -2, 3];
console.log(arr);
// Результат
// [ 1, -1, 2, -2, 3 ]
var status = arr.every(function(n) {
    return n>0;
});
console.log(status);
// Результат
// false
*/

// Массив. Методы перебора. Метод some() проверяет, удовлетворяет ли какой-либо элемент массива условию, заданному в передаваемой функции.
/*
var arr = [1, -1, 2, -2, 3];
console.log(arr);
// Результат
// [ 1, -1, 2, -2, 3 ]
var status = arr.some(function(n) {
    return n>0;
});
console.log(status);
// Результат
// true
*/